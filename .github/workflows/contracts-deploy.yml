name: Deploy Contracts to Base Sepolia

# Manual deployment only (triggered from GitHub Actions UI)
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - mainnet

jobs:
  deploy:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    
    # Add environment protection for mainnet
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compile contracts
        working-directory: packages/contracts
        run: pnpm compile

      - name: Run tests before deployment
        working-directory: packages/contracts
        run: pnpm test

      - name: Deploy to Base Sepolia
        if: github.event.inputs.environment == 'testnet'
        working-directory: packages/contracts
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
          TREASURY_SAFE_ADDRESS: ${{ secrets.TREASURY_SAFE_ADDRESS }}
          GOVERNANCE_BOT_ADDRESS: ${{ secrets.GOVERNANCE_BOT_ADDRESS }}
          ONRAMP_WALLET_ADDRESS: ${{ secrets.ONRAMP_WALLET_ADDRESS }}
          ONRAMP_DAILY_LIMIT: ${{ secrets.ONRAMP_DAILY_LIMIT }}
        run: pnpm deploy:sepolia

      - name: Verify contracts on BaseScan
        if: github.event.inputs.environment == 'testnet'
        working-directory: packages/contracts
        env:
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: pnpm verify:sepolia
        continue-on-error: true

      - name: Save deployment artifacts
        if: github.event.inputs.environment == 'testnet'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: packages/contracts/deployments/
          retention-days: 90

      - name: Create deployment summary
        if: github.event.inputs.environment == 'testnet'
        working-directory: packages/contracts
        run: |
          echo "## üéâ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed to: Base Sepolia" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Contract Addresses:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check the deployment artifacts for full details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Update backend with new contract addresses" >> $GITHUB_STEP_SUMMARY
          echo "2. Test end-to-end flows" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up monitoring" >> $GITHUB_STEP_SUMMARY

      - name: Comment deployment info on latest PR
        if: github.event.inputs.environment == 'testnet'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üöÄ Contracts Deployed to Base Sepolia!
            
            **Deployment Time:** ${new Date().toISOString()}
            **Triggered by:** @${context.actor}
            
            **Next Steps:**
            1. Download deployment artifacts from this workflow run
            2. Update backend with new contract addresses
            3. Test end-to-end flows
            4. Set up monitoring scripts
            
            **View on BaseScan:**
            - UnityCoin: Check deployment artifacts
            - SoulaaniCoin: Check deployment artifacts
            - RedemptionVault: Check deployment artifacts
            `;
            
            // Find the most recent PR and comment on it
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: prs.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
        continue-on-error: true

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('‚ùå Deployment failed! Check the logs for details.');

